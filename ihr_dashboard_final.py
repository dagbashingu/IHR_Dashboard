# -*- coding: utf-8 -*-
"""ihr_dashboard_final.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nsPx024h1JZfj1GMjaXQuJozxC0OdIcL
"""

pip install streamlit

# ihr_dashboard_final.py

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.linear_model import LinearRegression

st.title("üá≥üá¨ Nigeria's IHR (2005) Compliance Dashboard")

# Sidebar Upload
st.sidebar.title("üìÑ Upload New IHR Report (CSV)")
uploaded_file = st.sidebar.file_uploader("Choose a CSV file", type=["csv"])

# If CSV is uploaded, use it
if uploaded_file:
    df = pd.read_csv(uploaded_file, index_col=0)
    st.success("‚úÖ New data uploaded successfully!")
else:
    # Otherwise use mock sample data
    years = np.arange(2019, 2024)
    data = {
        "Surveillance": [3.5, 3.7, 3.9, 4.0, 4.1],
        "Response": [3.0, 3.2, 3.4, 3.5, 3.6],
        "Laboratory": [3.2, 3.5, 3.7, 3.8, 4.0],
        "Human Resources": [2.5, 2.7, 2.8, 2.9, 3.0],
        "Risk Communication": [3.8, 4.0, 4.1, 4.2, 4.3]
    }
    df = pd.DataFrame(data, index=years)

# Show KPIs
overall_score = df.mean(axis=1).iloc[-1]
st.metric(label="Overall Compliance Score (Last Year)", value=f"{overall_score:.2f} / 5")

# Bar chart (last available year)
st.subheader(f"Core Capacity Scores ({df.index[-1]})")
st.bar_chart(df.iloc[-1])

# Forecasting future scores using Linear Regression
st.subheader("Forecasting Compliance 2024‚Äì2030")

future_years = np.arange(2024, 2031)
forecast = {}

for column in df.columns:
    model = LinearRegression()
    model.fit(df.index.values.reshape(-1,1), df[column].values)
    predictions = model.predict(future_years.reshape(-1,1))
    forecast[column] = np.clip(predictions, 1, 5)

forecast_df = pd.DataFrame(forecast, index=future_years)

# Line plot
fig = px.line(forecast_df, markers=True, labels={"index": "Year", "value": "Score"})
st.plotly_chart(fig)

# Identify Weak Capacities
st.subheader("‚ö†Ô∏è Capacities Needing Urgent Attention (Score < 3.5 in 2024)")
weak_caps = forecast_df.loc[2024][forecast_df.loc[2024] < 3.5]
if not weak_caps.empty:
    for cap, score in weak_caps.items():
        st.error(f"{cap}: {score:.2f}")
else:
    st.success("‚úÖ No critical weaknesses predicted in 2024!")

# Footer
st.caption("Built with ‚ù§Ô∏è using Streamlit, Scikit-Learn, Plotly")

